package nl.devoorkant.sbdr.ws;import nl.devoorkant.sbdr.business.service.*;import nl.devoorkant.sbdr.business.transfer.GebruikersDetails;import nl.devoorkant.sbdr.business.transfer.LoginAllowed;import nl.devoorkant.sbdr.business.transfer.TokenTransfer;import nl.devoorkant.sbdr.business.wrapper.ErrorService;import nl.devoorkant.sbdr.oauth.OAuth2AuthorizationServerConfiguration;import nl.devoorkant.sbdr.oauth.ServerSecurityConfig;import nl.devoorkant.sbdr.ws.auth.GebruikersDetailsService;import nl.devoorkant.sbdr.ws.transfer.ErrorResource;import nl.devoorkant.sbdr.ws.transfer.LoginData;import nl.devoorkant.sbdr.ws.transfer.WebSocketTransfer;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.authentication.*;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.oauth2.common.OAuth2AccessToken;import org.springframework.security.oauth2.provider.AuthorizationRequest;import org.springframework.security.oauth2.provider.OAuth2Authentication;import org.springframework.security.oauth2.provider.OAuth2Request;import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;import org.springframework.stereotype.Component;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;import java.util.Base64;import java.util.Date;import java.util.HashMap;@Component@Path("/LoginService/login")public class LoginResource {	//@Autowired	//@Qualifier("authenticationManager")	//private AuthenticationManager authManager;	    @Value("${application.client_id}")    private String applicationClientId;        @Value("${application.secret}")    private String applicationSecret;    	@Autowired	ServerSecurityConfig securityConfig;	@Autowired	OAuth2AuthorizationServerConfiguration oauth2AuthorizationServer;	@Autowired	private AuthenticationManager authenticationManager;		@Autowired	DefaultOAuth2RequestFactory defaultOAuth2RequestFactory;	@Autowired	private CompanyAccountService companyAccountService;	@Autowired	private GebruikerService gebruikerService;	@Autowired	private GebruikersDetailsService gebruikersDetailsService;	@Autowired	private IpAddressBlockingService ipAddressBlockingService;	@Autowired	private MobileGebruikerService mobileGebruikerService;	@Autowired	private UserDetailsService userService;	@Autowired	private WachtwoordService wachtwoordService;	@Autowired	private WebTokenService webTokenService;	private static Logger LOGGER = LoggerFactory.getLogger(LoginResource.class);		@Value("${websocket_uri}")	private String websocketUri;//	@Path("MMobileKeyLogin")//	@POST//	@Consumes(MediaType.APPLICATION_JSON)//	@Produces(MediaType.APPLICATION_JSON)//	public TokenTransfer MMobileKeyLogin(String mobileClientKey) {//		TokenTransfer tokent = null;//		Authentication authenticationResult = null;//		GebruikersDetails userDetails = null;//		LOGGER.info("MMobileKeyLogin called, key: " + mobileClientKey);////		try {//			MobileAuthenticationToken authToken = new MobileAuthenticationToken(mobileClientKey, null);//			//UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(mobileClientKey,null);//			LOGGER.info("token: " + authToken.getName() + " " + authToken.getPrincipal());////			// Authenticate via Spring security with Spring manager//			authenticationResult = this.authManager.authenticate(authToken);////			userDetails = (GebruikersDetails) authenticationResult.getPrincipal();////			// We're here, so authentication by username/password succeeded////			// Check if there's a record in the mobileGebebruiker table with the current key//			MobileGebruiker mG = mobileGebruikerService.findByKey(mobileClientKey);////			if(mG == null) {//				// No record, so throw a bad credentials exception//				// UNDER NO CIRCUMSTANCES ADD A MOBILEGEBRUIKER RECORD SOLELY BASED ON THE MOBILE KEY//				throw new BadCredentialsException("Geen record gevonden met uw sleutel, u wordt doorgestuurd naar de login pagina");//			}////			// Set Spring Security context//			SecurityContextHolder.getContext().setAuthentication(authenticationResult);////			gebruikerService.updateLoginAttempts(mobileClientKey, true, true);////			LOGGER.info("userDetails: " + userDetails.getUsername() + " ");// + userDetails.getPassword());////			tokent = new TokenTransfer(TokenUtils.createToken(userDetails, null, mobileClientKey, true), userDetails.getLoginAllowed().getNrAanmeldpogingen(), null);////			LOGGER.info("tokenTransfer: " + tokent.getToken());////			LOGGER.info("User GET after tokencreation --- START");//			Object principal = null;//			try {//				LOGGER.debug("Find principal via Mule");//				org.acegisecurity.Authentication authentication2 = org.acegisecurity.context.SecurityContextHolder.getContext().getAuthentication();//				LOGGER.debug("Authentication found");////				principal = authentication2.getPrincipal();//				LOGGER.debug("Mule principal found: " + principal.toString());//			} catch(Exception e) {//				LOGGER.debug("error finding principal via Mule Security: " + e.getMessage());//			}////			try {//				LOGGER.debug("Find Principal via Spring");////				Authentication authentication2 = SecurityContextHolder.getContext().getAuthentication();////				LOGGER.debug("Authtentication found");//				principal = authentication2.getPrincipal();//				LOGGER.debug("Spring principal found: " + principal.toString());//			} catch(Exception e2) {//				LOGGER.debug("no principal found!!: " + e2.getMessage());//			}//////			if(principal instanceof String && ((String) principal).equals("anonymousUser")) {//				throw new WebApplicationException(401);//			}//			LOGGER.debug("There is a principal");//			UserDetails userDetails2 = (UserDetails) principal;//			LOGGER.debug("Principal UserDetails: " + userDetails2.getUsername()); // + " " + userDetails2.getPassword()//			LOGGER.info("User GET after tokencreation --- END");////			if(!webTokenService.addToken(mobileClientKey, tokent.getToken())) {//				throw new AlreadyLoggedInException("User already logged in");//			}////			//Add the new MCK to the database//			try {//				mobileGebruikerService.updateMobileGebruikerRecord(mobileClientKey, new Date());//			} catch(ServiceException e) {//				LOGGER.error("refreshWebTokenTuple, error: " + e.getMessage());//			}////			return tokent;//		} catch(BadCredentialsException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(mobileClientKey, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(mobileClientKey, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.getLoginAllowed() != LoginAllowed.LOGIN_NOTALLOWED_NOGEBRUIKER) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Gebruikersnaam en wachtwoord combinatie onjuist. Login poging " + loginAllowed.getNrAanmeldpogingen() + "/" + LoginAllowed.MAX_LOGINATTEMPTS + " niet gelukt.");//				}//				else {//					tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(LockedException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(mobileClientKey, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(mobileClientKey, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is tijdelijk geblokkeerd door het meer dan " + LoginAllowed.MAX_LOGINATTEMPTS + " verkeerd invoeren van uw gebruikersnaam en wachtwoord combinatie.\nNa " + LoginAllowed.MAX_BLOCKING_MINUTES + " minuten kunt u het opnieuw proberen.");//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(DisabledException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(mobileClientKey, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(mobileClientKey, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.getLoginAllowed() == LoginAllowed.LOGIN_NOTACTIVATED) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is nog niet geactiveerd.\nKijk in uw e-mail voor de activatielink.");//				}//				else {//					if(loginAllowed.isKlant()) {//						tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw klant account is uitgeschakeld of verlopen.\nMaak een nieuw klant account aan of neem contact op met betalingsachterstanden.nl");//					}//					else {//						tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is uitgeschakeld.\nNeem contact op met de beheerder van het hoofdaccount.");//					}//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Uw account is uitgeschakeld.\nNeem contact op met de beheerder.");//			}//		} catch(AuthenticationException e) {//			LOGGER.error("AuthenticationException: " +e.getMessage());////			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(mobileClientKey, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(mobileClientKey, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.isKlant()) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met betalingsachterstanden.nl indien de problemen blijven.");//				}//				else {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(AlreadyLoggedInException e) {//			tokent = new TokenTransfer(null, 0, "Er is al een sessie met uw gebruikersnaam actief.\nHet kan zijn dat u de browser abrupt heeft afgesloten. In dat geval is uw account tijdelijk geblokkeerd. U kunt dan na ongeveer " + LoginAllowed.MAX_ACTIVETOKEN_MINUTES + " minuten opnieuw inloggen.");//		} catch(Exception e) {//			LOGGER.error("Exception: " +e.getMessage());//			LOGGER.error("Type of exception: " + e.getClass().getName());//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(mobileClientKey, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(mobileClientKey, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(userDetails.isKlant()) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met indien de problemen blijven.");//				}//				else {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.");//			}//		}////		return tokent;//	}//	@Path("MUserPassLogin")//	@POST//	@Consumes(MediaType.APPLICATION_JSON)//	@Produces(MediaType.APPLICATION_JSON)//	public TokenTransfer MUserPassLogin(final MLoginData MUser) {//		TokenTransfer tokent = null;//		Authentication authenticationResult = null;//		GebruikersDetails userDetails = null;//		LOGGER.info("username: " + MUser.username + ", MCK: " + MUser.mobileClientKey + ", password: " + MUser.password);////		try {//			UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(MUser.username, MUser.password);//			LOGGER.info("token: " + authToken.getName() + " " + authToken.getPrincipal());////			// Authenticate via Spring security with Spring manager//			authenticationResult = this.authManager.authenticate(authToken);////			userDetails = (GebruikersDetails) authenticationResult.getPrincipal();////			// We're here, so authentication by username/password succeeded////			// Check if there's a record in the mobileGebebruiker table with the current key//			MobileGebruiker mG = mobileGebruikerService.findByKey(MUser.mobileClientKey);////			if(mG == null) {//				// No record, so we add it//				mobileGebruikerService.addMobileGebruikerRecord(userDetails.getUserId(), MUser.mobileClientKey);//			}////			// Token vervangen//			authToken = new UsernamePasswordAuthenticationToken(MUser.mobileClientKey, MUser.password);//			authenticationResult = this.authManager.authenticate(authToken);////			// Set Spring Security context//			SecurityContextHolder.getContext().setAuthentication(authenticationResult);////			gebruikerService.updateLoginAttempts(MUser.mobileClientKey, true, true);////			LOGGER.info("userDetails: " + userDetails.getUsername() + " " + userDetails.getPassword());////			tokent = new TokenTransfer(TokenUtils.createToken(userDetails, null, MUser.mobileClientKey, true), userDetails.getLoginAllowed().getNrAanmeldpogingen(), null);////			LOGGER.info("tokenTransfer: " + tokent.getToken());////			LOGGER.info("User GET after tokencreation --- START");//			Object principal = null;//			try {//				LOGGER.debug("Find principal via Mule");//				org.acegisecurity.Authentication authentication2 = org.acegisecurity.context.SecurityContextHolder.getContext().getAuthentication();//				LOGGER.debug("Authentication found");////				principal = authentication2.getPrincipal();//				LOGGER.debug("Mule principal found: " + principal.toString());//			} catch(Exception e) {//				LOGGER.debug("error finding principal via Mule Security: " + e.getMessage());//			}////			try {//				LOGGER.debug("Find Principal via Spring");////				Authentication authentication2 = SecurityContextHolder.getContext().getAuthentication();////				LOGGER.debug("Authtentication found");//				principal = authentication2.getPrincipal();//				LOGGER.debug("Spring principal found: " + principal.toString());//			} catch(Exception e2) {//				LOGGER.debug("no principal found!!: " + e2.getMessage());//			}//////			if(principal instanceof String && ((String) principal).equals("anonymousUser")) {//				throw new WebApplicationException(401);//			}//			LOGGER.debug("There is a principal");//			UserDetails userDetails2 = (UserDetails) principal;//			LOGGER.debug("Principal UserDetails: " + userDetails2.getUsername()); //+ " " + userDetails2.getPassword()//			LOGGER.info("User GET after tokencreation --- END");////			if(!webTokenService.addToken(MUser.mobileClientKey, tokent.getToken())) {//				throw new AlreadyLoggedInException("User already logged in");//			}////			//Add new MCK to database//			try{//				mobileGebruikerService.updateMobileGebruikerRecord(MUser.mobileClientKey, new Date());//			} catch(ServiceException e){//				LOGGER.error("refreshWebTokenTuple, error: " + e.getMessage());//			}////			return tokent;//		} catch(BadCredentialsException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(MUser.username, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(MUser.username, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.getLoginAllowed() != LoginAllowed.LOGIN_NOTALLOWED_NOGEBRUIKER) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Gebruikersnaam en wachtwoord combinatie onjuist. Login poging " + loginAllowed.getNrAanmeldpogingen() + "/" + LoginAllowed.MAX_LOGINATTEMPTS + " niet gelukt.");//				}//				else {//					tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(LockedException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(MUser.username, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(MUser.username, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is tijdelijk geblokkeerd door het meer dan " + LoginAllowed.MAX_LOGINATTEMPTS + " verkeerd invoeren van uw gebruikersnaam en wachtwoord combinatie.\nNa " + LoginAllowed.MAX_BLOCKING_MINUTES + " minuten kunt u het opnieuw proberen.");//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(DisabledException e) {//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(MUser.username, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(MUser.username, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.getLoginAllowed() == LoginAllowed.LOGIN_NOTACTIVATED) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is nog niet geactiveerd.\nKijk in uw e-mail voor de activatielink.");//				}//				else {//					if(loginAllowed.isKlant()) {//						tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw klant account is uitgeschakeld of verlopen.\nMaak een nieuw klant account aan of neem contact op met betalingsachterstanden.nl");//					}//					else {//						tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Uw account is uitgeschakeld.\nNeem contact op met de beheerder van het hoofdaccount.");//					}//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Uw account is uitgeschakeld.\nNeem contact op met de beheerder.");//			}//		} catch(AuthenticationException e) {//			LOGGER.error("AuthenticationException: " +e.getMessage());//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(MUser.username, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(MUser.username, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(loginAllowed.isKlant()) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met betalingsachterstanden.nl indien de problemen blijven.");//				}//				else {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");//			}//		} catch(AlreadyLoggedInException e) {//			tokent = new TokenTransfer(null, 0, "Er is al een sessie met uw gebruikersnaam actief.\nHet kan zijn dat u de browser abrupt heeft afgesloten. In dat geval is uw account tijdelijk geblokkeerd. U kunt dan na ongeveer " + LoginAllowed.MAX_ACTIVETOKEN_MINUTES + " minuten opnieuw inloggen.");//		} catch(Exception e) {//			LOGGER.error("Exception: " +e.getMessage());//			LOGGER.error("Type of exception: " + e.getClass().getName());//			LoginAllowed loginAllowed = null;////			try {//				// if not already succesful login//				if(userDetails == null) { gebruikerService.updateLoginAttempts(MUser.username, false, true); }////				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(MUser.username, userDetails, true, true);//			} catch(Exception e1) {//				// do nothing//			}////			if(loginAllowed != null) {//				if(userDetails.isKlant()) {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met indien de problemen blijven.");//				}//				else {//					tokent = new TokenTransfer(null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");//				}//			}//			else {//				tokent = new TokenTransfer(null, 0, "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.");//			}//		}////		return tokent;//	}	/**	 * Retrieves a specific company.	 *	 * @return A transfer containing the company data.	 */	@Path("activateCustomer")	@GET	@Consumes(MediaType.APPLICATION_JSON)	@Produces(MediaType.APPLICATION_JSON)	public Response activateCustomer(@QueryParam("activationid") String activationId, @QueryParam("username") String username) {		ErrorResource error = null;		LOGGER.info("activateKlant id: " + activationId);		if(activationId != null) {			try {				ErrorService errorservice = companyAccountService.activateKlant(activationId, username);				if(errorservice != null) { error = new ErrorResource(errorservice.getErrorCode()); }			} catch(ServiceException e) {				error = new ErrorResource(ErrorResource.ACCOUNT_NOT_ACTIVATED);			}		}		else { error = new ErrorResource(ErrorResource.ACCOUNT_NOT_ACTIVATED); }		return Response.ok(error).build();	}	/**	 * Retrieves a specific company.	 *	 * @return A transfer containing the company data.	 */	@Path("activateUser")	@GET	@Consumes(MediaType.APPLICATION_JSON)	@Produces(MediaType.APPLICATION_JSON)	public Response activateUser(@QueryParam("activationid") String activationId, @QueryParam("username") String userName) {		ErrorResource error = null;		LOGGER.info("activateUser id: " + activationId);		if(activationId != null && userName != null) {			try {				// no pwd				ErrorService errorservice = gebruikerService.activateGebruiker(activationId, userName, null); //gebruikerId);				if(errorservice != null) { error = new ErrorResource(errorservice.getErrorCode()); }			} catch(ServiceException e) {				error = new ErrorResource(ErrorResource.USER_NOT_ACTIVATED);			}		}		else { error = new ErrorResource(ErrorResource.USER_NOT_ACTIVATED); }		return Response.ok(error).build();	}	/**	 * Authenticates a user and creates an authentication token.	 *	 * @return A transfer containing the authentication token.	 */	@Path("authenticate")	@POST	@Consumes(MediaType.APPLICATION_JSON)	@Produces(MediaType.APPLICATION_JSON)	//@Produces({"application/xml","application/json"})	public TokenTransfer authenticate(final LoginData user) // @FormParam("username") String username, @FormParam("password") String password	{		TokenTransfer tokent = null;		Authentication authentication = null;		GebruikersDetails userDetails = null;		LOGGER.info("username: " + user.username); // + " password: " + user.password);		try {			UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.username + (user.bedrijfId == null ? ":0" : ":" + user.bedrijfId) , user.password);			LOGGER.info("token: " + authenticationToken.getName() + " " + authenticationToken.getPrincipal());					    HashMap<String, String> parameters = new HashMap<String, String>();		    parameters.put("client_id", applicationClientId);		    parameters.put("grant_type", "password");		    parameters.put("password", applicationSecret);		    parameters.put("scope", "read write");		    parameters.put("username", authenticationToken.getName());		    AuthorizationRequest authorizationRequest = defaultOAuth2RequestFactory.createAuthorizationRequest(parameters);		    authorizationRequest.setApproved(true);								    OAuth2Request oauth2Request = defaultOAuth2RequestFactory.createOAuth2Request(authorizationRequest);									// Authenticate via Spring security with Spring manager			//authentication = this.authManager.authenticate(authenticationToken);			authentication = securityConfig.authenticationManagerBean().authenticate(authenticationToken);			if(!ipAddressBlockingService.isIpAllowedToLogin(user.ipaddress)) { throw new IpAddressBlockedException(); }						// Create Mule authentication object			//org.acegisecurity.providers.UsernamePasswordAuthenticationToken muleAuthenticationToken = new org.acegisecurity.providers.UsernamePasswordAuthenticationToken(user.username, user.password);						OAuth2Authentication authenticationRequest = new OAuth2Authentication(oauth2Request, authentication);		    authenticationRequest.setAuthenticated(true);						OAuth2AccessToken oauthAccessToken = oauth2AuthorizationServer.tokenServices().createAccessToken(authenticationRequest);			// Set Mule Security context is not needed?			//org.acegisecurity.context.SecurityContextHolder.getContext().setAuthentication(muleAuthenticationToken);			// Set Spring Security context			SecurityContextHolder.getContext().setAuthentication(authentication);									/*			 * Reload user as password of authentication principal will be null after authorization and			 * password is needed for token generation			 */			//UserDetails userDetails = this.userService.loadUserByUsername(user.username);			userDetails = (GebruikersDetails) authentication.getPrincipal();			gebruikerService.updateLoginAttempts(userDetails.getUsername(), true, false);			LOGGER.info("userDetails: " + userDetails.getUsername()); // + " " + userDetails.getPassword()			tokent = new TokenTransfer(oauthAccessToken.getValue(), oauthAccessToken.getRefreshToken().getValue(), "Basic " + Base64.getEncoder().encodeToString(new String(applicationClientId + ":" + applicationSecret).getBytes()), userDetails.getLoginAllowed().getNrAanmeldpogingen(), null);			LOGGER.info("tokenTransfer: " + tokent.getToken());			LOGGER.info("User GET after tokencreation --- START");			Object principal = null;			try {				LOGGER.debug("Find Principal via Spring");				//Authentication authentication2 = SecurityContextHolder.getContext().getAuthentication();				LOGGER.debug("Authtentication found");				principal = authentication.getPrincipal();				LOGGER.debug("Spring principal found: " + principal.toString());			} catch(Exception e2) {				LOGGER.debug("no principal found!!: " + e2.getMessage());			}			if(principal instanceof String && ((String) principal).equals("anonymousUser")) {				throw new WebApplicationException(401);			}			LOGGER.debug("There is a principal");			UserDetails userDetails2 = (UserDetails) principal;			LOGGER.debug("Principal UserDetails: " + userDetails2.getUsername()); // + " " + userDetails2.getPassword()			LOGGER.info("User GET after tokencreation --- END");			if(user.ipaddress != null) { ipAddressBlockingService.removeLoginAttemptsIp(user.ipaddress); }			//if(!webTokenService.addToken(user.username, tokent.getToken())) {			//	throw new AlreadyLoggedInException("User already logged in");			//}			return tokent;		} catch(BadCredentialsException e) {			LoginAllowed loginAllowed = null;			try {				// if not already succesful login				if(userDetails == null) { gebruikerService.updateLoginAttempts(user.username, false, false); }				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(user.username, userDetails, true, false);			} catch(Exception e1) {				// do nothing			}			if(loginAllowed != null) {				if(loginAllowed.getLoginAllowed() != LoginAllowed.LOGIN_NOTALLOWED_NOGEBRUIKER) {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Gebruikersnaam en wachtwoord combinatie onjuist. Login poging " + loginAllowed.getNrAanmeldpogingen() + "/" + LoginAllowed.MAX_LOGINATTEMPTS + " niet gelukt.");				}				else {					tokent = new TokenTransfer(null, null, null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");				}			}			else {				tokent = new TokenTransfer(null, null, null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");			}			if (loginAllowed != null)				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, loginAllowed.getDatumLaatsteAanmeldpoging());			else				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, new Date());		} catch(LockedException e) {			LoginAllowed loginAllowed = null;			try {				// if not already succesful login				if(userDetails == null) { gebruikerService.updateLoginAttempts(user.username, false, false); }				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(user.username, userDetails, true, false);			} catch(Exception e1) {				// do nothing			}			if(loginAllowed != null) {				tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Uw account is tijdelijk geblokkeerd door het meer dan " + LoginAllowed.MAX_LOGINATTEMPTS + " verkeerd invoeren van uw gebruikersnaam en wachtwoord combinatie.\nNa " + LoginAllowed.MAX_BLOCKING_MINUTES + " minuten kunt u het opnieuw proberen.");			}			else {				tokent = new TokenTransfer(null, null, null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");			}			if (loginAllowed != null)				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, loginAllowed.getDatumLaatsteAanmeldpoging());			else				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, new Date());		} catch(DisabledException e) {			LoginAllowed loginAllowed = null;			try {				// if not already succesful login				if(userDetails == null) { gebruikerService.updateLoginAttempts(user.username, false, false); }				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(user.username, userDetails, true, false);			} catch(Exception e1) {				// do nothing			}			if(loginAllowed != null) {				if(loginAllowed.getLoginAllowed() == LoginAllowed.LOGIN_NOTACTIVATED) {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Uw account is nog niet geactiveerd.\nKijk in uw e-mail voor de activatielink.");				}				else {					if(loginAllowed.isKlant()) {						tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Uw klant account is uitgeschakeld of verlopen.\nMaak een nieuw klant account aan of neem contact op met CRZB.");					}					else {						tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Uw account is uitgeschakeld.\nNeem contact op met de beheerder van het hoofdaccount.");					}				}			}			else {				tokent = new TokenTransfer(null, null, null, 0, "Uw account is uitgeschakeld.\nNeem contact op met de beheerder.");			}			if (loginAllowed != null)				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, loginAllowed.getDatumLaatsteAanmeldpoging());			else				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, new Date());					} catch(AuthenticationException e) {			LOGGER.error("AuthenticationException: " +e.getMessage());			LoginAllowed loginAllowed = null;			try {				// if not already succesful login				if(userDetails == null) { gebruikerService.updateLoginAttempts(user.username, false, false); }				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(user.username, userDetails, true, false);			} catch(Exception e1) {				// do nothing			}			if(loginAllowed != null) {				if(loginAllowed.isKlant()) {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met CRZB indien de problemen blijven.");				}				else {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");				}			}			else {				tokent = new TokenTransfer(null, null, null, 0, "Gebruikersnaam en wachtwoord combinatie onjuist. Login niet gelukt.");			}			if (loginAllowed != null)				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, loginAllowed.getDatumLaatsteAanmeldpoging());			else				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, new Date());					} catch(IpAddressBlockedException e) {			tokent = new TokenTransfer(null, null, null, ipAddressBlockingService.getNrOfLoginAttempts(user.ipaddress), "Uw toegang is tijdelijk geblokkeerd door het meer dan " + LoginAllowed.MAX_LOGINATTEMPTS + " verkeerd invoeren van uw gebruikersnaam en wachtwoord combinatie.\nNa " + LoginAllowed.MAX_BLOCKING_MINUTES + " minuten kunt u het opnieuw proberen.");		} catch(AlreadyLoggedInException e) {			tokent = new TokenTransfer(null, null, null, 0, "Er is al een sessie met uw gebruikersnaam actief.\nHet kan zijn dat u de browser abrupt heeft afgesloten. In dat geval is uw account tijdelijk geblokkeerd. U kunt dan na ongeveer " + LoginAllowed.MAX_ACTIVETOKEN_MINUTES + " minuten opnieuw inloggen.");		} catch(Exception e) {			LOGGER.error("Exception: " +e.getMessage());			LOGGER.error("Type of exception: " + e.getClass().getName());			LoginAllowed loginAllowed = null;			try {				// if not already succesful login				if(userDetails == null) { gebruikerService.updateLoginAttempts(user.username, false, false); }				loginAllowed = gebruikerService.isGebruikerAllowedToLogin2(user.username, userDetails, true, false);			} catch(Exception e1) {				// do nothing			}			if(loginAllowed != null) {				if(userDetails != null && userDetails.isKlant()) {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met indien de problemen blijven.");				}				else {					tokent = new TokenTransfer(null, null, null, loginAllowed.getNrAanmeldpogingen(), "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.\nProbeer het nogmaals of neem contact op met de beheerder van het klant account indien de problemen blijven.");				}			}			else {				tokent = new TokenTransfer(null, null, null, 0, "Er is een onbekende fout opgetreden bij het inloggen. Login niet gelukt.");			}			if (loginAllowed != null)				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, loginAllowed.getDatumLaatsteAanmeldpoging());			else				ipAddressBlockingService.addLoginAttempt(user.ipaddress, user.username, user.password, new Date());		}		return tokent;	}	/**	 * Retrieves a websocket uri.	 *	 * @return A String containing the websocket uri.	 */	@Path("websocketdata")	@GET	@Produces(MediaType.APPLICATION_JSON)			public WebSocketTransfer webSocketData() {		return new WebSocketTransfer(websocketUri);	}	/**	 * Retrieves a specific company.	 *	 * @return A transfer containing the company data.	 */	//	@Path("resetPasswordUser")	//	@GET	//	@Consumes(MediaType.APPLICATION_JSON)	//	@Produces(MediaType.APPLICATION_JSON)	//	public Response resetPasswordUser(@QueryParam("gebruikersNaam") String gebruikersNaam, @QueryParam("id") String activationId, @QueryParam("password") String password)	//	{	//		ErrorResource error = null;	//	//		LOGGER.info("activateUser id: " + activationId );	//	//		if (activationId != null)	//		{	//			try {	//				ErrorService errorservice = gebruikerService.resetWachtwoord(gebruikersNaam, activationId, password); //gebruikerId);	//				if (errorservice != null)	//					error = new ErrorResource(errorservice.getErrorCode());	//			} catch (ServiceException e) {	//				error = new ErrorResource(ErrorResource.CANNOT_CHANGE_WACHTWOORD);	//			}	//	//		}	//		else	//			error = new ErrorResource(ErrorResource.CANNOT_CHANGE_WACHTWOORD);	//	//		return Response.ok(error).build();	//	}}