package nl.devoorkant.sbdr.data.model;
// Generated Feb 27, 2017 3:05:41 PM by Hibernate Tools 3.2.4.GA


import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;

/**
 * InternalProcess generated by hbm2java
 */

@XmlRootElement
// @org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
// @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Entity(name="InternalProcess")
@Table(name="InternalProcess"
)
public class InternalProcess  implements java.io.Serializable {


     private Integer internalProcessId;
     private Document document;
     private BriefBatch briefBatch;
     private InternalProcessStatus internalProcessStatus;
     private Melding melding;
     private Gebruiker verwerktDoorGebruiker;
     private Bedrijf bedrijf;
     private Klant klant;
     private InternalProcessType internalProcessType;
     private Date datumAangemaakt;
     private Date datumVerwerkt;

    public InternalProcess() {
    }

   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="InternalProcess_ID", unique=true, nullable=false)
    public Integer getInternalProcessId() {
        return this.internalProcessId;
    }
    
    public void setInternalProcessId(Integer internalProcessId) {
        this.internalProcessId = internalProcessId;
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Document_ID", nullable=false)
    public Document getDocument() {
        return this.document;
    }
    
    public void setDocument(Document document) {
        this.document = document;
    }



    @Transient
    public Integer getDocumentDocumentId() {
        return this.document == null ? null : this.document.getDocumentId();
    }

    public void setDocumentDocumentId(Integer documentId) {
        if (documentId == null) {
            this.document = null;
        } else {
            Document obj = new Document();
            obj.setDocumentId(documentId);
            this.document = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="BriefBatch_ID")
    public BriefBatch getBriefBatch() {
        return this.briefBatch;
    }
    
    public void setBriefBatch(BriefBatch briefBatch) {
        this.briefBatch = briefBatch;
    }



    @Transient
    public Integer getBriefBatchBriefBatchId() {
        return this.briefBatch == null ? null : this.briefBatch.getBriefBatchId();
    }

    public void setBriefBatchBriefBatchId(Integer briefBatchId) {
        if (briefBatchId == null) {
            this.briefBatch = null;
        } else {
            BriefBatch obj = new BriefBatch();
            obj.setBriefBatchId(briefBatchId);
            this.briefBatch = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="InternalProcessStatus", nullable=false)
    public InternalProcessStatus getInternalProcessStatus() {
        return this.internalProcessStatus;
    }
    
    public void setInternalProcessStatus(InternalProcessStatus internalProcessStatus) {
        this.internalProcessStatus = internalProcessStatus;
    }



    @Transient
    public String getInternalProcessStatusCode() {
        return this.internalProcessStatus == null ? null : this.internalProcessStatus.getCode();
    }

    public void setInternalProcessStatusCode(String code) {
        if (code == null) {
            this.internalProcessStatus = null;
        } else {
            InternalProcessStatus obj = new InternalProcessStatus();
            obj.setCode(code);
            this.internalProcessStatus = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Melding_ID")
    public Melding getMelding() {
        return this.melding;
    }
    
    public void setMelding(Melding melding) {
        this.melding = melding;
    }



    @Transient
    public Integer getMeldingMeldingId() {
        return this.melding == null ? null : this.melding.getMeldingId();
    }

    public void setMeldingMeldingId(Integer meldingId) {
        if (meldingId == null) {
            this.melding = null;
        } else {
            Melding obj = new Melding();
            obj.setMeldingId(meldingId);
            this.melding = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="VerwerktDoorGebruiker_ID")
    public Gebruiker getVerwerktDoorGebruiker() {
        return this.verwerktDoorGebruiker;
    }
    
    public void setVerwerktDoorGebruiker(Gebruiker verwerktDoorGebruiker) {
        this.verwerktDoorGebruiker = verwerktDoorGebruiker;
    }



    @Transient
    public Integer getVerwerktDoorGebruikerGebruikerId() {
        return this.verwerktDoorGebruiker == null ? null : this.verwerktDoorGebruiker.getGebruikerId();
    }

    public void setVerwerktDoorGebruikerGebruikerId(int gebruikerId) {
        Gebruiker obj = new Gebruiker();
        obj.setGebruikerId(gebruikerId);
        this.verwerktDoorGebruiker = obj;
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Bedrijf_ID")
    public Bedrijf getBedrijf() {
        return this.bedrijf;
    }
    
    public void setBedrijf(Bedrijf bedrijf) {
        this.bedrijf = bedrijf;
    }



    @Transient
    public Integer getBedrijfBedrijfId() {
        return this.bedrijf == null ? null : this.bedrijf.getBedrijfId();
    }

    public void setBedrijfBedrijfId(Integer bedrijfId) {
        if (bedrijfId == null) {
            this.bedrijf = null;
        } else {
            Bedrijf obj = new Bedrijf();
            obj.setBedrijfId(bedrijfId);
            this.bedrijf = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="KlantGebruiker_ID")
    public Klant getKlant() {
        return this.klant;
    }
    
    public void setKlant(Klant klant) {
        this.klant = klant;
    }



    @Transient
    public Integer getKlantGebruikerId() {
        return this.klant == null ? null : this.klant.getGebruikerId();
    }

    public void setKlantGebruikerId(int gebruikerId) {
        Klant obj = new Klant();
        obj.setGebruikerId(gebruikerId);
        this.klant = obj;
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="InternalProcessType", nullable=false)
    public InternalProcessType getInternalProcessType() {
        return this.internalProcessType;
    }
    
    public void setInternalProcessType(InternalProcessType internalProcessType) {
        this.internalProcessType = internalProcessType;
    }



    @Transient
    public String getInternalProcessTypeCode() {
        return this.internalProcessType == null ? null : this.internalProcessType.getCode();
    }

    public void setInternalProcessTypeCode(String code) {
        if (code == null) {
            this.internalProcessType = null;
        } else {
            InternalProcessType obj = new InternalProcessType();
            obj.setCode(code);
            this.internalProcessType = obj;
        }
    }


// @org.codehaus.jackson.map.annotate.JsonSerialize(using=nl.devoorkant.bdr.jackson.JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DatumAangemaakt", nullable=false, length=19)
    public Date getDatumAangemaakt() {
        return this.datumAangemaakt;
    }
    
    public void setDatumAangemaakt(Date datumAangemaakt) {
        this.datumAangemaakt = datumAangemaakt;
    }


// @org.codehaus.jackson.map.annotate.JsonSerialize(using=nl.devoorkant.bdr.jackson.JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DatumVerwerkt", length=19)
    public Date getDatumVerwerkt() {
        return this.datumVerwerkt;
    }
    
    public void setDatumVerwerkt(Date datumVerwerkt) {
        this.datumVerwerkt = datumVerwerkt;
    }





}


