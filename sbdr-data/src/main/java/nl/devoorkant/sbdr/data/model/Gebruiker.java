package nl.devoorkant.sbdr.data.model;
// Generated Feb 27, 2017 3:05:41 PM by Hibernate Tools 3.2.4.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;

/**
 * Gebruiker generated by hbm2java
 */

@XmlRootElement
// @org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json")
// @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Entity(name="Gebruiker")
@Table(name="Gebruiker"
)
@Inheritance(strategy=InheritanceType.JOINED)
public class Gebruiker extends GebruikerBasis implements java.io.Serializable {


     private Wachtwoord wachtwoord;
     private Bedrijf bedrijf;
     private String gebruikersNaam;
     private String emailAdres;
     private String voornaam;
     private String naam;
     private String functie;
     private Short nrAanmeldPogingen;
     private Date datumLaatsteAanmelding;
     private Date datumLaatsteAanmeldpoging;
     private Date datumLaatsteLogout;
     private Integer showHelp;
     private String afdeling;
     private String telefoonNummer;
     private String geslacht;
     private Set<Rol> rollen = new HashSet<Rol>(0);
     private Set<Melding> meldingsForLaatsteMutatieDoorGebruikerId = new HashSet<Melding>(0);
     private Set<Melding> meldingenVoorMeldingDoorGebruikerId = new HashSet<Melding>(0);
     private Set<Monitoring> monitoringsForVerwijderdDoorGebruikerId = new HashSet<Monitoring>(0);
     private Set<MeldingBatch> meldingBatchs = new HashSet<MeldingBatch>(0);
     private Set<CustomMelding> customMeldings = new HashSet<CustomMelding>(0);
     private Set<Monitoring> monitoringsForLaatsteMutatieDoorGebruikerId = new HashSet<Monitoring>(0);
     private Set<Support> supportsForGeslotenDoorGebruikerId = new HashSet<Support>(0);
     private Set<Document> documents = new HashSet<Document>(0);
     private Set<Alert> alerts = new HashSet<Alert>(0);
     private Set<Logging> loggings = new HashSet<Logging>(0);
     private Set<Melding> meldingenVoorVerwijderdDoorGebruikerId = new HashSet<Melding>(0);
     private Set<Support> supportsForGebruikerId = new HashSet<Support>(0);
     private Set<SoapTransactie> soapTransacties = new HashSet<SoapTransactie>(0);
     private Set<GebruikerGroep> gebruikerGroepen = new HashSet<GebruikerGroep>(0);
     private Set<InternalProcess> verwerkteInternalProcesses = new HashSet<InternalProcess>(0);
     private Set<Monitoring> monitoringsForMonitoringDoorGebruikerId = new HashSet<Monitoring>(0);
     private Set<BriefBatch> briefBatchs = new HashSet<BriefBatch>(0);
     private Set<Melding> meldingenVoorGeaccordeerdDoorGebruikerId = new HashSet<Melding>(0);
     private Set<MobileGebruiker> mobileGebruikers = new HashSet<MobileGebruiker>(0);
     private Set<Melding> meldingsForGeparkeerdDoorGebruikerId = new HashSet<Melding>(0);
     private Set<BedrijfManaged> bedrijvenManagedDoorGebruikerId = new HashSet<BedrijfManaged>(0);

    public Gebruiker() {
    }

   

@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Wachtwoord_ID", nullable=false)
    public Wachtwoord getWachtwoord() {
        return this.wachtwoord;
    }
    
    public void setWachtwoord(Wachtwoord wachtwoord) {
        this.wachtwoord = wachtwoord;
    }



    @Transient
    public Integer getWachtwoordWachtwoordId() {
        return this.wachtwoord == null ? null : this.wachtwoord.getWachtwoordId();
    }

    public void setWachtwoordWachtwoordId(Integer wachtwoordId) {
        if (wachtwoordId == null) {
            this.wachtwoord = null;
        } else {
            Wachtwoord obj = new Wachtwoord();
            obj.setWachtwoordId(wachtwoordId);
            this.wachtwoord = obj;
        }
    }


@XmlTransient
@JsonIgnore
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Bedrijf_ID")
    public Bedrijf getBedrijf() {
        return this.bedrijf;
    }
    
    public void setBedrijf(Bedrijf bedrijf) {
        this.bedrijf = bedrijf;
    }



    @Transient
    public Integer getBedrijfBedrijfId() {
        return this.bedrijf == null ? null : this.bedrijf.getBedrijfId();
    }

    public void setBedrijfBedrijfId(Integer bedrijfId) {
        if (bedrijfId == null) {
            this.bedrijf = null;
        } else {
            Bedrijf obj = new Bedrijf();
            obj.setBedrijfId(bedrijfId);
            this.bedrijf = obj;
        }
    }


    
    @Column(name="GebruikersNaam", length=50)
    public String getGebruikersNaam() {
        return this.gebruikersNaam;
    }
    
    public void setGebruikersNaam(String gebruikersNaam) {
        this.gebruikersNaam = gebruikersNaam;
    }


    
    @Column(name="EmailAdres", length=50)
    public String getEmailAdres() {
        return this.emailAdres;
    }
    
    public void setEmailAdres(String emailAdres) {
        this.emailAdres = emailAdres;
    }


    
    @Column(name="Voornaam", nullable=false, length=50)
    public String getVoornaam() {
        return this.voornaam;
    }
    
    public void setVoornaam(String voornaam) {
        this.voornaam = voornaam;
    }


    
    @Column(name="Naam", nullable=false, length=50)
    public String getNaam() {
        return this.naam;
    }
    
    public void setNaam(String naam) {
        this.naam = naam;
    }


    
    @Column(name="Functie", nullable=false, length=50)
    public String getFunctie() {
        return this.functie;
    }
    
    public void setFunctie(String functie) {
        this.functie = functie;
    }


    
    @Column(name="NrAanmeldPogingen")
    public Short getNrAanmeldPogingen() {
        return this.nrAanmeldPogingen;
    }
    
    public void setNrAanmeldPogingen(Short nrAanmeldPogingen) {
        this.nrAanmeldPogingen = nrAanmeldPogingen;
    }


// @org.codehaus.jackson.map.annotate.JsonSerialize(using=nl.devoorkant.bdr.jackson.JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DatumLaatsteAanmelding", length=19)
    public Date getDatumLaatsteAanmelding() {
        return this.datumLaatsteAanmelding;
    }
    
    public void setDatumLaatsteAanmelding(Date datumLaatsteAanmelding) {
        this.datumLaatsteAanmelding = datumLaatsteAanmelding;
    }


// @org.codehaus.jackson.map.annotate.JsonSerialize(using=nl.devoorkant.bdr.jackson.JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DatumLaatsteAanmeldpoging", length=19)
    public Date getDatumLaatsteAanmeldpoging() {
        return this.datumLaatsteAanmeldpoging;
    }
    
    public void setDatumLaatsteAanmeldpoging(Date datumLaatsteAanmeldpoging) {
        this.datumLaatsteAanmeldpoging = datumLaatsteAanmeldpoging;
    }


// @org.codehaus.jackson.map.annotate.JsonSerialize(using=nl.devoorkant.bdr.jackson.JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DatumLaatsteLogout", length=19)
    public Date getDatumLaatsteLogout() {
        return this.datumLaatsteLogout;
    }
    
    public void setDatumLaatsteLogout(Date datumLaatsteLogout) {
        this.datumLaatsteLogout = datumLaatsteLogout;
    }


    
    @Column(name="ShowHelp")
    public Integer getShowHelp() {
        return this.showHelp;
    }
    
    public void setShowHelp(Integer showHelp) {
        this.showHelp = showHelp;
    }


    
    @Column(name="Afdeling", length=50)
    public String getAfdeling() {
        return this.afdeling;
    }
    
    public void setAfdeling(String afdeling) {
        this.afdeling = afdeling;
    }


    
    @Column(name="TelefoonNummer", length=40)
    public String getTelefoonNummer() {
        return this.telefoonNummer;
    }
    
    public void setTelefoonNummer(String telefoonNummer) {
        this.telefoonNummer = telefoonNummer;
    }


    
    @Column(name="Geslacht", nullable=false, length=1)
    public String getGeslacht() {
        return this.geslacht;
    }
    
    public void setGeslacht(String geslacht) {
        this.geslacht = geslacht;
    }


@XmlTransient
@JsonIgnore
@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="Gebruiker_Rol", catalog="sbdr", joinColumns = { 
        @JoinColumn(name="Gebruiker_ID", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="Rol_ID", nullable=false, updatable=false) })
    public Set<Rol> getRollen() {
        return this.rollen;
    }
    
    public void setRollen(Set<Rol> rollen) {
        this.rollen = rollen;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByLaatsteMutatieDoorGebruikerId")
    public Set<Melding> getMeldingsForLaatsteMutatieDoorGebruikerId() {
        return this.meldingsForLaatsteMutatieDoorGebruikerId;
    }
    
    public void setMeldingsForLaatsteMutatieDoorGebruikerId(Set<Melding> meldingsForLaatsteMutatieDoorGebruikerId) {
        this.meldingsForLaatsteMutatieDoorGebruikerId = meldingsForLaatsteMutatieDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByMeldingDoorGebruikerId")
    public Set<Melding> getMeldingenVoorMeldingDoorGebruikerId() {
        return this.meldingenVoorMeldingDoorGebruikerId;
    }
    
    public void setMeldingenVoorMeldingDoorGebruikerId(Set<Melding> meldingenVoorMeldingDoorGebruikerId) {
        this.meldingenVoorMeldingDoorGebruikerId = meldingenVoorMeldingDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByVerwijderdDoorGebruikerId")
    public Set<Monitoring> getMonitoringsForVerwijderdDoorGebruikerId() {
        return this.monitoringsForVerwijderdDoorGebruikerId;
    }
    
    public void setMonitoringsForVerwijderdDoorGebruikerId(Set<Monitoring> monitoringsForVerwijderdDoorGebruikerId) {
        this.monitoringsForVerwijderdDoorGebruikerId = monitoringsForVerwijderdDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<MeldingBatch> getMeldingBatchs() {
        return this.meldingBatchs;
    }
    
    public void setMeldingBatchs(Set<MeldingBatch> meldingBatchs) {
        this.meldingBatchs = meldingBatchs;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<CustomMelding> getCustomMeldings() {
        return this.customMeldings;
    }
    
    public void setCustomMeldings(Set<CustomMelding> customMeldings) {
        this.customMeldings = customMeldings;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByLaatsteMutatieDoorGebruikerId")
    public Set<Monitoring> getMonitoringsForLaatsteMutatieDoorGebruikerId() {
        return this.monitoringsForLaatsteMutatieDoorGebruikerId;
    }
    
    public void setMonitoringsForLaatsteMutatieDoorGebruikerId(Set<Monitoring> monitoringsForLaatsteMutatieDoorGebruikerId) {
        this.monitoringsForLaatsteMutatieDoorGebruikerId = monitoringsForLaatsteMutatieDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByGeslotenDoorGebruikerId")
    public Set<Support> getSupportsForGeslotenDoorGebruikerId() {
        return this.supportsForGeslotenDoorGebruikerId;
    }
    
    public void setSupportsForGeslotenDoorGebruikerId(Set<Support> supportsForGeslotenDoorGebruikerId) {
        this.supportsForGeslotenDoorGebruikerId = supportsForGeslotenDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<Document> getDocuments() {
        return this.documents;
    }
    
    public void setDocuments(Set<Document> documents) {
        this.documents = documents;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<Alert> getAlerts() {
        return this.alerts;
    }
    
    public void setAlerts(Set<Alert> alerts) {
        this.alerts = alerts;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<Logging> getLoggings() {
        return this.loggings;
    }
    
    public void setLoggings(Set<Logging> loggings) {
        this.loggings = loggings;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByVerwijderdDoorGebruikerId")
    public Set<Melding> getMeldingenVoorVerwijderdDoorGebruikerId() {
        return this.meldingenVoorVerwijderdDoorGebruikerId;
    }
    
    public void setMeldingenVoorVerwijderdDoorGebruikerId(Set<Melding> meldingenVoorVerwijderdDoorGebruikerId) {
        this.meldingenVoorVerwijderdDoorGebruikerId = meldingenVoorVerwijderdDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByGebruikerId")
    public Set<Support> getSupportsForGebruikerId() {
        return this.supportsForGebruikerId;
    }
    
    public void setSupportsForGebruikerId(Set<Support> supportsForGebruikerId) {
        this.supportsForGebruikerId = supportsForGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<SoapTransactie> getSoapTransacties() {
        return this.soapTransacties;
    }
    
    public void setSoapTransacties(Set<SoapTransactie> soapTransacties) {
        this.soapTransacties = soapTransacties;
    }


@XmlTransient
@JsonIgnore
@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="GebruikerGroep_Gebruiker", catalog="sbdr", joinColumns = { 
        @JoinColumn(name="EnkeleGebruiker_ID", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="GroepGebruiker_ID", nullable=false, updatable=false) })
    public Set<GebruikerGroep> getGebruikerGroepen() {
        return this.gebruikerGroepen;
    }
    
    public void setGebruikerGroepen(Set<GebruikerGroep> gebruikerGroepen) {
        this.gebruikerGroepen = gebruikerGroepen;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="verwerktDoorGebruiker")
    public Set<InternalProcess> getVerwerkteInternalProcesses() {
        return this.verwerkteInternalProcesses;
    }
    
    public void setVerwerkteInternalProcesses(Set<InternalProcess> verwerkteInternalProcesses) {
        this.verwerkteInternalProcesses = verwerkteInternalProcesses;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByMonitoringDoorGebruikerId")
    public Set<Monitoring> getMonitoringsForMonitoringDoorGebruikerId() {
        return this.monitoringsForMonitoringDoorGebruikerId;
    }
    
    public void setMonitoringsForMonitoringDoorGebruikerId(Set<Monitoring> monitoringsForMonitoringDoorGebruikerId) {
        this.monitoringsForMonitoringDoorGebruikerId = monitoringsForMonitoringDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<BriefBatch> getBriefBatchs() {
        return this.briefBatchs;
    }
    
    public void setBriefBatchs(Set<BriefBatch> briefBatchs) {
        this.briefBatchs = briefBatchs;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByGeaccordeerdDoorGebruikerId")
    public Set<Melding> getMeldingenVoorGeaccordeerdDoorGebruikerId() {
        return this.meldingenVoorGeaccordeerdDoorGebruikerId;
    }
    
    public void setMeldingenVoorGeaccordeerdDoorGebruikerId(Set<Melding> meldingenVoorGeaccordeerdDoorGebruikerId) {
        this.meldingenVoorGeaccordeerdDoorGebruikerId = meldingenVoorGeaccordeerdDoorGebruikerId;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<MobileGebruiker> getMobileGebruikers() {
        return this.mobileGebruikers;
    }
    
    public void setMobileGebruikers(Set<MobileGebruiker> mobileGebruikers) {
        this.mobileGebruikers = mobileGebruikers;
    }


@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruikerByGeparkeerdDoorGebruikerId")
    public Set<Melding> getMeldingsForGeparkeerdDoorGebruikerId() {
        return this.meldingsForGeparkeerdDoorGebruikerId;
    }
    
    public void setMeldingsForGeparkeerdDoorGebruikerId(Set<Melding> meldingsForGeparkeerdDoorGebruikerId) {
        this.meldingsForGeparkeerdDoorGebruikerId = meldingsForGeparkeerdDoorGebruikerId;
    }

@XmlTransient
@JsonIgnore
@OneToMany(fetch=FetchType.LAZY, mappedBy="gebruiker")
    public Set<BedrijfManaged> getBedrijvenManagedDoorGebruikerId() {
        return this.bedrijvenManagedDoorGebruikerId;
    }
    
    public void setBedrijvenManagedDoorGebruikerId(Set<BedrijfManaged> bedrijvenManagedDoorGebruikerId) {
        this.bedrijvenManagedDoorGebruikerId = bedrijvenManagedDoorGebruikerId;
    }
}


